// <auto-generated />
using System;
using Alps.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Alps.Web.Service.Migrations
{
    [DbContext(typeof(AlpsContext))]
    [Migration("20190718143315_Loan_AddLenderMemo")]
    partial class Loan_AddLenderMemo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Alps.Domain.AccountingMgr.TradeAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankAccount");

                    b.Property<string>("CellPhoneNumber");

                    b.Property<bool>("InventoryManagement");

                    b.Property<string>("Name");

                    b.Property<string>("Test");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Types");

                    b.HasKey("ID");

                    b.ToTable("TradeAccounts");
                });

            modelBuilder.Entity("Alps.Domain.City", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName");

                    b.Property<string>("Name");

                    b.Property<Guid>("ProvinceID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Alps.Domain.Common.Customer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contact");

                    b.Property<string>("Name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Alps.Domain.Common.Department", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Alps.Domain.Common.Supplier", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid>("SupplierClassID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("SupplierClassID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Alps.Domain.Common.Unit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Group");

                    b.Property<bool>("IsBaseUnit");

                    b.Property<string>("Name");

                    b.Property<decimal>("RateOfExchange");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Alps.Domain.Country", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Alps.Domain.County", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CityID");

                    b.Property<string>("FullName");

                    b.Property<string>("Name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.Lender", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IDNumber");

                    b.Property<string>("Memo");

                    b.Property<string>("MobilePhoneNumber");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("Lenders");
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.LoanVoucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTimeOffset>("DepositDate");

                    b.Property<string>("HashCode");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(7,4)");

                    b.Property<DateTimeOffset>("InterestSettlementDate");

                    b.Property<Guid>("LenderID");

                    b.Property<DateTimeOffset>("ModifyDate");

                    b.Property<string>("Operator");

                    b.Property<decimal>("OriginAmount");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("VoucherNumber");

                    b.HasKey("ID");

                    b.HasIndex("LenderID");

                    b.ToTable("LoanVouchers");
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.WithdrawRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<DateTimeOffset>("DepositDate");

                    b.Property<decimal>("Interest");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(7,4)");

                    b.Property<Guid>("LoanVoucherID");

                    b.Property<DateTimeOffset>("ModifyDate");

                    b.Property<string>("Operator");

                    b.Property<string>("Remark");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("LoanVoucherID");

                    b.ToTable("WithdrawRecords");
                });

            modelBuilder.Entity("Alps.Domain.LogisticsMgr.DispatchRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CarNumber");

                    b.Property<DateTimeOffset>("CreateTime");

                    b.Property<string>("Creater");

                    b.Property<decimal>("GrossWeight");

                    b.Property<string>("GrossWeightOperator");

                    b.Property<DateTimeOffset>("GrossWeightTime");

                    b.Property<DateTimeOffset>("ModifyTime");

                    b.Property<long>("RecordNumber");

                    b.Property<int>("Status");

                    b.Property<decimal>("TareWeight");

                    b.Property<string>("TareWeightOperator");

                    b.Property<DateTimeOffset>("TareWeightTime");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Type");

                    b.Property<string>("WeightConfirmedOperator");

                    b.Property<DateTimeOffset>("WeightConfirmedTime");

                    b.HasKey("ID");

                    b.ToTable("DispatchRecords");
                });

            modelBuilder.Entity("Alps.Domain.LogisticsMgr.DistributionVoucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Creater");

                    b.Property<DateTime>("DeliveryTime");

                    b.Property<Guid>("SaleOrderID");

                    b.Property<int>("Sequence");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("SaleOrderID");

                    b.ToTable("DistributionVoucher");
                });

            modelBuilder.Entity("Alps.Domain.LogisticsMgr.DistributionVoucherItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AuxiliaryQuantity");

                    b.Property<Guid?>("DistributionVoucherID");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductSkuID");

                    b.Property<decimal>("Quantity");

                    b.Property<Guid>("SaleOrderItemID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("DistributionVoucherID");

                    b.HasIndex("ProductSkuID");

                    b.ToTable("DistributionVoucherItem");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.Catagory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsParentCatagory");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("Catagories");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.DeliveryVoucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreateTime");

                    b.Property<string>("Creater");

                    b.Property<Guid>("CustomerID");

                    b.Property<Guid>("DepartmentID");

                    b.Property<string>("Handler");

                    b.Property<int>("State");

                    b.Property<string>("SubmitUser");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TotalAmount");

                    b.Property<decimal>("TotalQuantity");

                    b.Property<decimal>("TotalWeight");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("DeliveryVouchers");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.DeliveryVoucherItem", b =>
                {
                    b.Property<Guid>("ID");

                    b.Property<Guid>("DeliveryVoucherID");

                    b.Property<decimal>("Amount");

                    b.Property<Guid>("PositionID");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductNumber");

                    b.Property<Guid?>("PurchaseOrderItemID");

                    b.Property<decimal>("Quantity");

                    b.Property<string>("Remark");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("Weight");

                    b.HasKey("ID", "DeliveryVoucherID");

                    b.HasIndex("DeliveryVoucherID");

                    b.HasIndex("PositionID");

                    b.ToTable("DeliveryVoucherItem");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialReceipt", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreateTime");

                    b.Property<string>("Creater");

                    b.Property<Guid>("DepartmentID");

                    b.Property<string>("Handler");

                    b.Property<Guid>("SourceDepartmentID");

                    b.Property<int>("State");

                    b.Property<string>("SubmitUser");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TotalAmount");

                    b.Property<decimal>("TotalQuantity");

                    b.Property<decimal>("TotalWeight");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SourceDepartmentID");

                    b.ToTable("MaterialReceipts");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialReceiptItem", b =>
                {
                    b.Property<Guid>("ID");

                    b.Property<Guid>("MaterialReceiptID");

                    b.Property<decimal>("Amount");

                    b.Property<Guid>("PositionID");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductNumber");

                    b.Property<decimal>("Quantity");

                    b.Property<string>("Remark");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("Weight");

                    b.HasKey("ID", "MaterialReceiptID");

                    b.HasIndex("MaterialReceiptID");

                    b.ToTable("MaterialReceiptItems");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialRequisition", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreateTime");

                    b.Property<string>("Creater");

                    b.Property<Guid>("DepartmentID");

                    b.Property<string>("Handler");

                    b.Property<Guid>("RequisitionDepartmentID");

                    b.Property<int>("State");

                    b.Property<string>("SubmitUser");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TotalAmount");

                    b.Property<decimal>("TotalQuantity");

                    b.Property<decimal>("TotalWeight");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("RequisitionDepartmentID");

                    b.ToTable("MaterialRequisitions");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialRequisitionItem", b =>
                {
                    b.Property<Guid>("ID");

                    b.Property<Guid>("MaterialRequisitionID");

                    b.Property<decimal>("Amount");

                    b.Property<Guid>("PositionID");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductNumber");

                    b.Property<decimal>("Quantity");

                    b.Property<string>("Remark");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("Weight");

                    b.HasKey("ID", "MaterialRequisitionID");

                    b.HasIndex("MaterialRequisitionID");

                    b.ToTable("MaterialRequisitionItems");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.Position", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Warehouse");

                    b.HasKey("ID");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AuxiliaryUnitID");

                    b.Property<Guid>("BaseUnitID");

                    b.Property<Guid>("CatagoryID");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("EnableAuxiliaryUnit");

                    b.Property<string>("FullDescription");

                    b.Property<string>("FullName");

                    b.Property<decimal>("ListPrice");

                    b.Property<string>("Name");

                    b.Property<int>("PricingMethod");

                    b.Property<string>("ShortDescription");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("BaseUnitID");

                    b.HasIndex("CatagoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.ProductCatagorySetting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CatagoryID");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name");

                    b.Property<Guid>("ProductID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("ProductCatagorySettings");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.ProductSku", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CommodityName");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("FullName");

                    b.Property<decimal>("ListPrice");

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<decimal>("OrderedAuxiliaryQuantity");

                    b.Property<decimal>("OrderedQuantity");

                    b.Property<decimal>("PreSellAuxiliaryQuantity");

                    b.Property<decimal>("PreSellQuantity");

                    b.Property<Guid>("ProductID");

                    b.Property<decimal>("QuantityRate");

                    b.Property<decimal>("StockAuxiliaryQuantity");

                    b.Property<decimal>("StockQuantity");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Vendable");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductSkus");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.ProductStock", b =>
                {
                    b.Property<Guid>("OwnerID");

                    b.Property<Guid>("PositionID");

                    b.Property<Guid>("ProductSkuID");

                    b.Property<string>("SerialNumber");

                    b.Property<decimal>("AuxiliaryQuantity");

                    b.Property<Guid>("ID");

                    b.Property<decimal>("Quantity");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("OwnerID", "PositionID", "ProductSkuID", "SerialNumber");

                    b.HasIndex("PositionID");

                    b.HasIndex("ProductSkuID");

                    b.ToTable("ProductStocks");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.WarehouseVoucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreateTime");

                    b.Property<string>("Creater");

                    b.Property<Guid>("DepartmentID");

                    b.Property<string>("Handler");

                    b.Property<int>("State");

                    b.Property<string>("SubmitUser");

                    b.Property<Guid>("SupplierID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TotalAmount");

                    b.Property<decimal>("TotalAuxiliaryQuantity");

                    b.Property<decimal>("TotalQuantity");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SupplierID");

                    b.ToTable("WarehouseVouchers");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.WarehouseVoucherItem", b =>
                {
                    b.Property<Guid>("ID");

                    b.Property<Guid>("WarehouseVoucherID");

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("AuxiliaryQuantity");

                    b.Property<decimal>("Freight");

                    b.Property<Guid>("PositionID");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductNumber");

                    b.Property<Guid?>("PurchaseOrderItemID");

                    b.Property<decimal>("Quantity");

                    b.Property<string>("Remark");

                    b.Property<decimal>("Tax");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("Weight");

                    b.HasKey("ID", "WarehouseVoucherID");

                    b.HasIndex("PositionID");

                    b.HasIndex("WarehouseVoucherID");

                    b.ToTable("WarehouseVoucherItems");
                });

            modelBuilder.Entity("Alps.Domain.Province", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CountryID");

                    b.Property<string>("FullName");

                    b.Property<string>("Name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Alps.Domain.PurchaseMgr.PurchaseOrder", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Creater");

                    b.Property<DateTime>("OrderTime");

                    b.Property<int>("State");

                    b.Property<Guid>("SupplierID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TotalAmount");

                    b.Property<decimal>("TotalQuantity");

                    b.Property<decimal>("TotalWeight");

                    b.HasKey("ID");

                    b.HasIndex("SupplierID");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Alps.Domain.PurchaseMgr.PurchaseOrderItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Price");

                    b.Property<Guid?>("ProductID");

                    b.Property<Guid>("PurchaseOrderID");

                    b.Property<decimal>("Quantity");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("Weight");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("PurchaseOrderID");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("Alps.Domain.PurchaseMgr.SupplierClass", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("SupplierClasses");
                });

            modelBuilder.Entity("Alps.Domain.SaleMgr.Commodity", b =>
                {
                    b.Property<Guid>("ID");

                    b.Property<DateTime?>("DateOfDelivery");

                    b.Property<string>("Description");

                    b.Property<bool>("IsFutures");

                    b.Property<bool>("IsVirtualCommodity");

                    b.Property<decimal>("ListPrice");

                    b.Property<string>("Name");

                    b.Property<decimal>("OrderedAuxiliaryQuantity");

                    b.Property<decimal>("OrderedQuantity");

                    b.Property<decimal>("PreSellAuxiliaryQuantity");

                    b.Property<decimal>("PreSellQuantity");

                    b.Property<Guid>("ProductSkuID");

                    b.Property<decimal>("QuantityRate");

                    b.Property<decimal>("StockAuxiliaryQuantity");

                    b.Property<decimal>("StockQuantity");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("Commodities");
                });

            modelBuilder.Entity("Alps.Domain.SaleMgr.SaleOrder", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerID");

                    b.Property<string>("DeliveryAddress");

                    b.Property<DateTime>("OrderTime");

                    b.Property<Guid?>("ParentSaleOrderID");

                    b.Property<int>("Status");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TotalAmount");

                    b.Property<decimal>("TotalAuxiliaryQuantity");

                    b.Property<decimal>("TotalQuantity");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ParentSaleOrderID");

                    b.ToTable("SaleOrders");
                });

            modelBuilder.Entity("Alps.Domain.SaleMgr.SaleOrderItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AuxiliaryQuantity");

                    b.Property<string>("CommodityName");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductSkuID");

                    b.Property<decimal>("Quantity");

                    b.Property<string>("Remark");

                    b.Property<Guid>("SaleOrderID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("ProductSkuID");

                    b.HasIndex("SaleOrderID");

                    b.ToTable("SaleOrderItems");
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.AlpsResource", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Controller");

                    b.Property<string>("Name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("AlpsResources");
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.AlpsRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AlpsUserID");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("AlpsUserID");

                    b.ToTable("AlpsRoles");
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.AlpsUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IDName");

                    b.Property<string>("IdentityNumber");

                    b.Property<string>("MobilePhoneNumber");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("AlpsUsers");
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.Permission", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ResourceID");

                    b.Property<Guid>("RoleID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("ResourceID");

                    b.HasIndex("RoleID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockInVoucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("ConfirmTime");

                    b.Property<string>("Confirmer");

                    b.Property<DateTimeOffset>("CreateTime");

                    b.Property<string>("Creater");

                    b.Property<Guid>("DepartmentID");

                    b.Property<Guid?>("DispatchRecordID");

                    b.Property<int>("Status");

                    b.Property<Guid>("SupplierID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TotalAmount");

                    b.Property<decimal>("TotalAuxiliaryQuantity");

                    b.Property<decimal>("TotalQuantity");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DispatchRecordID");

                    b.HasIndex("SupplierID");

                    b.ToTable("StockInVouchers");
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockInVoucherItem", b =>
                {
                    b.Property<Guid>("ID");

                    b.Property<Guid>("StockInVoucherID");

                    b.Property<decimal>("AuxiliaryQuantity");

                    b.Property<Guid>("PositionID");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductSkuID");

                    b.Property<decimal>("Quantity");

                    b.Property<string>("SerialNumber");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID", "StockInVoucherID");

                    b.HasIndex("StockInVoucherID");

                    b.ToTable("StockInVoucherItems");
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockOutVoucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("ConfirmTime");

                    b.Property<string>("Confirmer");

                    b.Property<DateTimeOffset>("CreateTime");

                    b.Property<string>("Creater");

                    b.Property<Guid>("CustomerID");

                    b.Property<Guid>("DepartmentID");

                    b.Property<int>("Status");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TotalAmount");

                    b.Property<decimal>("TotalAuxiliaryQuantity");

                    b.Property<decimal>("TotalQuantity");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("StockOutVouchers");
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockOutVoucherItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AuxiliaryQuantity");

                    b.Property<Guid>("PositionID");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductSkuID");

                    b.Property<decimal>("Quantity");

                    b.Property<string>("SerialNumber");

                    b.Property<Guid>("StockOutVoucherID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.HasIndex("StockOutVoucherID");

                    b.ToTable("StockOutVoucherItems");
                });

            modelBuilder.Entity("Alps.Domain.City", b =>
                {
                    b.HasOne("Alps.Domain.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.Common.Customer", b =>
                {
                    b.OwnsOne("Alps.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerID");

                            b1.Property<Guid>("CountyID");

                            b1.Property<string>("Street");

                            b1.HasIndex("CountyID");

                            b1.ToTable("Customers");

                            b1.HasOne("Alps.Domain.County", "County")
                                .WithMany()
                                .HasForeignKey("CountyID")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Alps.Domain.Common.Customer")
                                .WithOne("Address")
                                .HasForeignKey("Alps.Domain.Address", "CustomerID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Alps.Domain.Common.Supplier", b =>
                {
                    b.HasOne("Alps.Domain.PurchaseMgr.SupplierClass", "SupplierClass")
                        .WithMany()
                        .HasForeignKey("SupplierClassID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Alps.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("SupplierID");

                            b1.Property<Guid>("CountyID");

                            b1.Property<string>("Street");

                            b1.HasIndex("CountyID");

                            b1.ToTable("Suppliers");

                            b1.HasOne("Alps.Domain.County", "County")
                                .WithMany()
                                .HasForeignKey("CountyID")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Alps.Domain.Common.Supplier")
                                .WithOne("Address")
                                .HasForeignKey("Alps.Domain.Address", "SupplierID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Alps.Domain.County", b =>
                {
                    b.HasOne("Alps.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.LoanVoucher", b =>
                {
                    b.HasOne("Alps.Domain.LoanMgr.Lender", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.WithdrawRecord", b =>
                {
                    b.HasOne("Alps.Domain.LoanMgr.LoanVoucher", "LoanVoucher")
                        .WithMany("WithdrawRecords")
                        .HasForeignKey("LoanVoucherID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.LogisticsMgr.DistributionVoucher", b =>
                {
                    b.HasOne("Alps.Domain.SaleMgr.SaleOrder", "SaleOrder")
                        .WithMany("DeliveryVouchers")
                        .HasForeignKey("SaleOrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Alps.Domain.Address", "DistributionAddress", b1 =>
                        {
                            b1.Property<Guid>("DistributionVoucherID");

                            b1.Property<Guid>("CountyID");

                            b1.Property<string>("Street");

                            b1.HasIndex("CountyID");

                            b1.ToTable("DistributionVoucher");

                            b1.HasOne("Alps.Domain.County", "County")
                                .WithMany()
                                .HasForeignKey("CountyID")
                                .OnDelete(DeleteBehavior.Restrict);

                            b1.HasOne("Alps.Domain.LogisticsMgr.DistributionVoucher")
                                .WithOne("DistributionAddress")
                                .HasForeignKey("Alps.Domain.Address", "DistributionVoucherID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Alps.Domain.LogisticsMgr.DistributionVoucherItem", b =>
                {
                    b.HasOne("Alps.Domain.LogisticsMgr.DistributionVoucher")
                        .WithMany("Items")
                        .HasForeignKey("DistributionVoucherID");

                    b.HasOne("Alps.Domain.ProductMgr.ProductSku", "ProductSku")
                        .WithMany()
                        .HasForeignKey("ProductSkuID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.Catagory", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.Catagory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.DeliveryVoucher", b =>
                {
                    b.HasOne("Alps.Domain.Common.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alps.Domain.Common.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.DeliveryVoucherItem", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.DeliveryVoucher", "DeliveryVoucher")
                        .WithMany("Items")
                        .HasForeignKey("DeliveryVoucherID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alps.Domain.ProductMgr.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Alps.Domain.ProductMgr.ProductSkuInfo", "ProductSkuInfo", b1 =>
                        {
                            b1.Property<Guid>("DeliveryVoucherItemID");

                            b1.Property<Guid>("DeliveryVoucherItemDeliveryVoucherID");

                            b1.Property<string>("Name");

                            b1.Property<int>("PricingMethod");

                            b1.Property<Guid>("SkuID");

                            b1.ToTable("DeliveryVoucherItem");

                            b1.HasOne("Alps.Domain.ProductMgr.DeliveryVoucherItem")
                                .WithOne("ProductSkuInfo")
                                .HasForeignKey("Alps.Domain.ProductMgr.ProductSkuInfo", "DeliveryVoucherItemID", "DeliveryVoucherItemDeliveryVoucherID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialReceipt", b =>
                {
                    b.HasOne("Alps.Domain.Common.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alps.Domain.Common.Department", "SourceDepartment")
                        .WithMany()
                        .HasForeignKey("SourceDepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialReceiptItem", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.MaterialReceipt", "MaterialReceipt")
                        .WithMany("Items")
                        .HasForeignKey("MaterialReceiptID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Alps.Domain.ProductMgr.ProductSkuInfo", "ProductSkuInfo", b1 =>
                        {
                            b1.Property<Guid>("MaterialReceiptItemID");

                            b1.Property<Guid>("MaterialReceiptItemMaterialReceiptID");

                            b1.Property<string>("Name");

                            b1.Property<int>("PricingMethod");

                            b1.Property<Guid>("SkuID");

                            b1.ToTable("MaterialReceiptItems");

                            b1.HasOne("Alps.Domain.ProductMgr.MaterialReceiptItem")
                                .WithOne("ProductSkuInfo")
                                .HasForeignKey("Alps.Domain.ProductMgr.ProductSkuInfo", "MaterialReceiptItemID", "MaterialReceiptItemMaterialReceiptID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialRequisition", b =>
                {
                    b.HasOne("Alps.Domain.Common.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alps.Domain.Common.Department", "RequisitionDepartment")
                        .WithMany()
                        .HasForeignKey("RequisitionDepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialRequisitionItem", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.MaterialRequisition", "MaterialRequisition")
                        .WithMany("Items")
                        .HasForeignKey("MaterialRequisitionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Alps.Domain.ProductMgr.ProductSkuInfo", "ProductSkuInfo", b1 =>
                        {
                            b1.Property<Guid>("MaterialRequisitionItemID");

                            b1.Property<Guid>("MaterialRequisitionItemMaterialRequisitionID");

                            b1.Property<string>("Name");

                            b1.Property<int>("PricingMethod");

                            b1.Property<Guid>("SkuID");

                            b1.ToTable("MaterialRequisitionItems");

                            b1.HasOne("Alps.Domain.ProductMgr.MaterialRequisitionItem")
                                .WithOne("ProductSkuInfo")
                                .HasForeignKey("Alps.Domain.ProductMgr.ProductSkuInfo", "MaterialRequisitionItemID", "MaterialRequisitionItemMaterialRequisitionID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.Product", b =>
                {
                    b.HasOne("Alps.Domain.Common.Unit", "BaseUnit")
                        .WithMany()
                        .HasForeignKey("BaseUnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alps.Domain.ProductMgr.Catagory", "Catagory")
                        .WithMany()
                        .HasForeignKey("CatagoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.ProductSku", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.ProductStock", b =>
                {
                    b.HasOne("Alps.Domain.Common.Department", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alps.Domain.ProductMgr.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alps.Domain.ProductMgr.ProductSku", "ProductSku")
                        .WithMany()
                        .HasForeignKey("ProductSkuID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.WarehouseVoucher", b =>
                {
                    b.HasOne("Alps.Domain.Common.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alps.Domain.Common.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.WarehouseVoucherItem", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alps.Domain.ProductMgr.WarehouseVoucher", "WarehouseVoucher")
                        .WithMany("Items")
                        .HasForeignKey("WarehouseVoucherID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Alps.Domain.ProductMgr.ProductSkuInfo", "ProductSkuInfo", b1 =>
                        {
                            b1.Property<Guid>("WarehouseVoucherItemID");

                            b1.Property<Guid>("WarehouseVoucherItemWarehouseVoucherID");

                            b1.Property<string>("Name");

                            b1.Property<int>("PricingMethod");

                            b1.Property<Guid>("SkuID");

                            b1.ToTable("WarehouseVoucherItems");

                            b1.HasOne("Alps.Domain.ProductMgr.WarehouseVoucherItem")
                                .WithOne("ProductSkuInfo")
                                .HasForeignKey("Alps.Domain.ProductMgr.ProductSkuInfo", "WarehouseVoucherItemID", "WarehouseVoucherItemWarehouseVoucherID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Alps.Domain.Province", b =>
                {
                    b.HasOne("Alps.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.PurchaseMgr.PurchaseOrder", b =>
                {
                    b.HasOne("Alps.Domain.Common.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.PurchaseMgr.PurchaseOrderItem", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");

                    b.HasOne("Alps.Domain.PurchaseMgr.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Alps.Domain.ProductMgr.ProductSkuInfo", "ProductSkuInfo", b1 =>
                        {
                            b1.Property<Guid>("PurchaseOrderItemID");

                            b1.Property<string>("Name");

                            b1.Property<int>("PricingMethod");

                            b1.Property<Guid>("SkuID");

                            b1.ToTable("PurchaseOrderItems");

                            b1.HasOne("Alps.Domain.PurchaseMgr.PurchaseOrderItem")
                                .WithOne("ProductSkuInfo")
                                .HasForeignKey("Alps.Domain.ProductMgr.ProductSkuInfo", "PurchaseOrderItemID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Alps.Domain.SaleMgr.Commodity", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.ProductSku", "Sku")
                        .WithMany()
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.SaleMgr.SaleOrder", b =>
                {
                    b.HasOne("Alps.Domain.Common.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alps.Domain.SaleMgr.SaleOrder", "ParentSaleOrder")
                        .WithMany()
                        .HasForeignKey("ParentSaleOrderID");
                });

            modelBuilder.Entity("Alps.Domain.SaleMgr.SaleOrderItem", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.ProductSku", "ProductSku")
                        .WithMany()
                        .HasForeignKey("ProductSkuID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alps.Domain.SaleMgr.SaleOrder", "SaleOrder")
                        .WithMany("Items")
                        .HasForeignKey("SaleOrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.AlpsRole", b =>
                {
                    b.HasOne("Alps.Domain.SecurityMgr.AlpsUser")
                        .WithMany("Roles")
                        .HasForeignKey("AlpsUserID");
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.Permission", b =>
                {
                    b.HasOne("Alps.Domain.SecurityMgr.AlpsResource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alps.Domain.SecurityMgr.AlpsRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockInVoucher", b =>
                {
                    b.HasOne("Alps.Domain.Common.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alps.Domain.LogisticsMgr.DispatchRecord", "DispatchRecord")
                        .WithMany()
                        .HasForeignKey("DispatchRecordID");

                    b.HasOne("Alps.Domain.Common.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockInVoucherItem", b =>
                {
                    b.HasOne("Alps.Domain.StockMgr.StockInVoucher", "StockInVoucher")
                        .WithMany("Items")
                        .HasForeignKey("StockInVoucherID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockOutVoucher", b =>
                {
                    b.HasOne("Alps.Domain.Common.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alps.Domain.Common.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockOutVoucherItem", b =>
                {
                    b.HasOne("Alps.Domain.StockMgr.StockOutVoucher", "StockOutVoucher")
                        .WithMany("Items")
                        .HasForeignKey("StockOutVoucherID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
