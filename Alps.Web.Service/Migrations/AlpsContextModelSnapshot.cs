// <auto-generated />
using System;
using Alps.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Alps.Web.Service.Migrations
{
    [DbContext(typeof(AlpsContext))]
    partial class AlpsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Alps.Domain.AccountingMgr.TradeAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InventoryManagement")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Types")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Accounting_TradeAccounts");
                });

            modelBuilder.Entity("Alps.Domain.City", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProvinceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("City_Cities");
                });

            modelBuilder.Entity("Alps.Domain.Common.Customer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Common_Customers");
                });

            modelBuilder.Entity("Alps.Domain.Common.Department", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Common_Departments");
                });

            modelBuilder.Entity("Alps.Domain.Common.Supplier", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("SupplierClassID");

                    b.ToTable("Common_Suppliers");
                });

            modelBuilder.Entity("Alps.Domain.Common.Unit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<bool>("IsBaseUnit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RateOfExchange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Common_Units");
                });

            modelBuilder.Entity("Alps.Domain.Country", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Country_Countries");
                });

            modelBuilder.Entity("Alps.Domain.County", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("County_Counties");
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.InterestRate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LoanSettingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("PublishDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTimeOffset>("StartExecutionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("LoanSettingID");

                    b.ToTable("Loan_InterestRate");
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.Lender", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Invalid")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("InvalidDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Loan_Lenders");
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.LoanRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Creater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Interest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("InvalidDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InvalidMaker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInvalid")
                        .HasColumnType("bit");

                    b.Property<Guid>("LoanVoucherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OperateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ReviewTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Reviewer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LoanVoucherID");

                    b.ToTable("Loan_LoanRecord");
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.LoanSetting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MinDepositAmount")
                        .HasColumnType("int");

                    b.Property<int>("MinDepositDay")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Loan_LoanSettings");
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.LoanVoucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Creater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("DepositTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IdentityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("InterestSettlementDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("InvalidDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InvalidMaker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInvalid")
                        .HasColumnType("bit");

                    b.Property<Guid>("LenderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("VoucherTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("LenderID");

                    b.ToTable("Loan_LoanVouchers");
                });

            modelBuilder.Entity("Alps.Domain.LogisticsMgr.DispatchRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Creater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrossWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GrossWeightOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("GrossWeightTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifyTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("RecordNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TareWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TareWeightOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TareWeightTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("WeightConfirmedOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("WeightConfirmedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("Logistics_DispatchRecords");
                });

            modelBuilder.Entity("Alps.Domain.LogisticsMgr.DistributionVoucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Creater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SaleOrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("SaleOrderID");

                    b.ToTable("Logistics_DistributionVoucher");
                });

            modelBuilder.Entity("Alps.Domain.LogisticsMgr.DistributionVoucherItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DistributionVoucherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductSkuID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SaleOrderItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("DistributionVoucherID");

                    b.HasIndex("ProductSkuID");

                    b.ToTable("Logistics_DistributionVoucherItem");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.Catagory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsParentCatagory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("Product_Catagories");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.DeliveryVoucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Creater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Handler")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("SubmitUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWeight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Product_DeliveryVouchers");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.DeliveryVoucherItem", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeliveryVoucherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PurchaseOrderItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID", "DeliveryVoucherID");

                    b.HasIndex("DeliveryVoucherID");

                    b.HasIndex("PositionID");

                    b.ToTable("Product_DeliveryVoucherItem");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialReceipt", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Creater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Handler")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SourceDepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("SubmitUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWeight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SourceDepartmentID");

                    b.ToTable("Product_MaterialReceipts");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialReceiptItem", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaterialReceiptID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID", "MaterialReceiptID");

                    b.HasIndex("MaterialReceiptID");

                    b.ToTable("Product_MaterialReceiptItems");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialRequisition", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Creater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Handler")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequisitionDepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("SubmitUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWeight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("RequisitionDepartmentID");

                    b.ToTable("Product_MaterialRequisitions");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialRequisitionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaterialRequisitionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID", "MaterialRequisitionID");

                    b.HasIndex("MaterialRequisitionID");

                    b.ToTable("Product_MaterialRequisitionItems");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.Position", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Warehouse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Product_Positions");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuxiliaryUnitID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseUnitID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CatagoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableAuxiliaryUnit")
                        .HasColumnType("bit");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PricingMethod")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("BaseUnitID");

                    b.HasIndex("CatagoryID");

                    b.ToTable("Product_Products");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.ProductCatagorySetting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CatagoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Product_ProductCatagorySettings");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.ProductSku", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommodityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderedAuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OrderedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreSellAuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreSellQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("QuantityRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StockAuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StockQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("Vendable")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("Product_ProductSkus");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.ProductStock", b =>
                {
                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductSkuID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("OwnerID", "PositionID", "ProductSkuID", "SerialNumber");

                    b.HasIndex("PositionID");

                    b.HasIndex("ProductSkuID");

                    b.ToTable("Product_ProductStocks");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.WarehouseVoucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Creater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Handler")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("SubmitUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Product_WarehouseVouchers");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.WarehouseVoucherItem", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseVoucherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Freight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PurchaseOrderItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID", "WarehouseVoucherID");

                    b.HasIndex("PositionID");

                    b.HasIndex("WarehouseVoucherID");

                    b.ToTable("Product_WarehouseVoucherItems");
                });

            modelBuilder.Entity("Alps.Domain.Province", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Province_Provinces");
                });

            modelBuilder.Entity("Alps.Domain.PurchaseMgr.PurchaseOrder", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Creater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWeight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Purchase_PurchaseOrders");
                });

            modelBuilder.Entity("Alps.Domain.PurchaseMgr.PurchaseOrderItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseOrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("PurchaseOrderID");

                    b.ToTable("Purchase_PurchaseOrderItems");
                });

            modelBuilder.Entity("Alps.Domain.PurchaseMgr.SupplierClass", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Purchase_SupplierClasses");
                });

            modelBuilder.Entity("Alps.Domain.SaleMgr.Commodity", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfDelivery")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFutures")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVirtualCommodity")
                        .HasColumnType("bit");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderedAuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OrderedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreSellAuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreSellQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductSkuID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("QuantityRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StockAuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StockQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Sale_Commodities");
                });

            modelBuilder.Entity("Alps.Domain.SaleMgr.SaleOrder", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentSaleOrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ParentSaleOrderID");

                    b.ToTable("Sale_SaleOrders");
                });

            modelBuilder.Entity("Alps.Domain.SaleMgr.SaleOrderItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CommodityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductSkuID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SaleOrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("ProductSkuID");

                    b.HasIndex("SaleOrderID");

                    b.ToTable("Sale_SaleOrderItems");
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.AlpsResource", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset>("UpdateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("Security_AlpsResources");
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.AlpsRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Security_AlpsRoles");
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.AlpsRoleUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("Security_AlpsRoleUser");
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.AlpsUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IDName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Security_AlpsUsers");
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.Permission", b =>
                {
                    b.Property<Guid>("ResourceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ResourceID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("Security_Permission");
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockInVoucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ConfirmTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Confirmer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Creater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DispatchRecordID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DispatchRecordID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Stock_StockInVouchers");
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockInVoucherItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductSkuID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StockInVoucherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("StockInVoucherID");

                    b.ToTable("Stock_StockInVoucherItems");
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockOutVoucher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ConfirmTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Confirmer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Creater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Stock_StockOutVouchers");
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockOutVoucherItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AuxiliaryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductSkuID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StockOutVoucherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("StockOutVoucherID");

                    b.ToTable("Stock_StockOutVoucherItems");
                });

            modelBuilder.Entity("Alps.Domain.City", b =>
                {
                    b.HasOne("Alps.Domain.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.Common.Customer", b =>
                {
                    b.OwnsOne("Alps.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CountyID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CustomerID");

                            b1.HasIndex("CountyID");

                            b1.ToTable("Common_Customers");

                            b1.HasOne("Alps.Domain.County", "County")
                                .WithMany()
                                .HasForeignKey("CountyID")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("CustomerID");
                        });
                });

            modelBuilder.Entity("Alps.Domain.Common.Supplier", b =>
                {
                    b.HasOne("Alps.Domain.PurchaseMgr.SupplierClass", "SupplierClass")
                        .WithMany()
                        .HasForeignKey("SupplierClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Alps.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("SupplierID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CountyID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SupplierID");

                            b1.HasIndex("CountyID");

                            b1.ToTable("Common_Suppliers");

                            b1.HasOne("Alps.Domain.County", "County")
                                .WithMany()
                                .HasForeignKey("CountyID")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("SupplierID");
                        });
                });

            modelBuilder.Entity("Alps.Domain.County", b =>
                {
                    b.HasOne("Alps.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.InterestRate", b =>
                {
                    b.HasOne("Alps.Domain.LoanMgr.LoanSetting", null)
                        .WithMany("InterestRates")
                        .HasForeignKey("LoanSettingID");
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.LoanRecord", b =>
                {
                    b.HasOne("Alps.Domain.LoanMgr.LoanVoucher", "LoanVoucher")
                        .WithMany("Records")
                        .HasForeignKey("LoanVoucherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.LoanMgr.LoanVoucher", b =>
                {
                    b.HasOne("Alps.Domain.LoanMgr.Lender", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.LogisticsMgr.DistributionVoucher", b =>
                {
                    b.HasOne("Alps.Domain.SaleMgr.SaleOrder", "SaleOrder")
                        .WithMany("DeliveryVouchers")
                        .HasForeignKey("SaleOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Alps.Domain.Address", "DistributionAddress", b1 =>
                        {
                            b1.Property<Guid>("DistributionVoucherID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CountyID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DistributionVoucherID");

                            b1.HasIndex("CountyID");

                            b1.ToTable("Address_Address");

                            b1.HasOne("Alps.Domain.County", "County")
                                .WithMany()
                                .HasForeignKey("CountyID")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("DistributionVoucherID");
                        });
                });

            modelBuilder.Entity("Alps.Domain.LogisticsMgr.DistributionVoucherItem", b =>
                {
                    b.HasOne("Alps.Domain.LogisticsMgr.DistributionVoucher", null)
                        .WithMany("Items")
                        .HasForeignKey("DistributionVoucherID");

                    b.HasOne("Alps.Domain.ProductMgr.ProductSku", "ProductSku")
                        .WithMany()
                        .HasForeignKey("ProductSkuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.Catagory", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.Catagory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.DeliveryVoucher", b =>
                {
                    b.HasOne("Alps.Domain.Common.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alps.Domain.Common.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.DeliveryVoucherItem", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.DeliveryVoucher", "DeliveryVoucher")
                        .WithMany("Items")
                        .HasForeignKey("DeliveryVoucherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alps.Domain.ProductMgr.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Alps.Domain.ProductMgr.ProductSkuInfo", "ProductSkuInfo", b1 =>
                        {
                            b1.Property<Guid>("DeliveryVoucherItemID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("DeliveryVoucherItemDeliveryVoucherID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("PricingMethod")
                                .HasColumnType("int");

                            b1.Property<Guid>("SkuID")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DeliveryVoucherItemID", "DeliveryVoucherItemDeliveryVoucherID");

                            b1.ToTable("Product_ProductSkuInfo");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryVoucherItemID", "DeliveryVoucherItemDeliveryVoucherID");
                        });
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialReceipt", b =>
                {
                    b.HasOne("Alps.Domain.Common.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alps.Domain.Common.Department", "SourceDepartment")
                        .WithMany()
                        .HasForeignKey("SourceDepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialReceiptItem", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.MaterialReceipt", "MaterialReceipt")
                        .WithMany("Items")
                        .HasForeignKey("MaterialReceiptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Alps.Domain.ProductMgr.ProductSkuInfo", "ProductSkuInfo", b1 =>
                        {
                            b1.Property<Guid>("MaterialReceiptItemID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("MaterialReceiptItemMaterialReceiptID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("PricingMethod")
                                .HasColumnType("int");

                            b1.Property<Guid>("SkuID")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("MaterialReceiptItemID", "MaterialReceiptItemMaterialReceiptID");

                            b1.ToTable("Product_MaterialReceiptItems");

                            b1.WithOwner()
                                .HasForeignKey("MaterialReceiptItemID", "MaterialReceiptItemMaterialReceiptID");
                        });
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialRequisition", b =>
                {
                    b.HasOne("Alps.Domain.Common.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alps.Domain.Common.Department", "RequisitionDepartment")
                        .WithMany()
                        .HasForeignKey("RequisitionDepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.MaterialRequisitionItem", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.MaterialRequisition", "MaterialRequisition")
                        .WithMany("Items")
                        .HasForeignKey("MaterialRequisitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Alps.Domain.ProductMgr.ProductSkuInfo", "ProductSkuInfo", b1 =>
                        {
                            b1.Property<Guid>("MaterialRequisitionItemID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("MaterialRequisitionItemMaterialRequisitionID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("PricingMethod")
                                .HasColumnType("int");

                            b1.Property<Guid>("SkuID")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("MaterialRequisitionItemID", "MaterialRequisitionItemMaterialRequisitionID");

                            b1.ToTable("Product_MaterialRequisitionItems");

                            b1.WithOwner()
                                .HasForeignKey("MaterialRequisitionItemID", "MaterialRequisitionItemMaterialRequisitionID");
                        });
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.Product", b =>
                {
                    b.HasOne("Alps.Domain.Common.Unit", "BaseUnit")
                        .WithMany()
                        .HasForeignKey("BaseUnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alps.Domain.ProductMgr.Catagory", "Catagory")
                        .WithMany()
                        .HasForeignKey("CatagoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.ProductSku", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.ProductStock", b =>
                {
                    b.HasOne("Alps.Domain.Common.Department", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alps.Domain.ProductMgr.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alps.Domain.ProductMgr.ProductSku", "ProductSku")
                        .WithMany()
                        .HasForeignKey("ProductSkuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.WarehouseVoucher", b =>
                {
                    b.HasOne("Alps.Domain.Common.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alps.Domain.Common.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.ProductMgr.WarehouseVoucherItem", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alps.Domain.ProductMgr.WarehouseVoucher", "WarehouseVoucher")
                        .WithMany("Items")
                        .HasForeignKey("WarehouseVoucherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Alps.Domain.ProductMgr.ProductSkuInfo", "ProductSkuInfo", b1 =>
                        {
                            b1.Property<Guid>("WarehouseVoucherItemID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("WarehouseVoucherItemWarehouseVoucherID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("PricingMethod")
                                .HasColumnType("int");

                            b1.Property<Guid>("SkuID")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("WarehouseVoucherItemID", "WarehouseVoucherItemWarehouseVoucherID");

                            b1.ToTable("Product_WarehouseVoucherItems");

                            b1.WithOwner()
                                .HasForeignKey("WarehouseVoucherItemID", "WarehouseVoucherItemWarehouseVoucherID");
                        });
                });

            modelBuilder.Entity("Alps.Domain.Province", b =>
                {
                    b.HasOne("Alps.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.PurchaseMgr.PurchaseOrder", b =>
                {
                    b.HasOne("Alps.Domain.Common.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.PurchaseMgr.PurchaseOrderItem", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");

                    b.HasOne("Alps.Domain.PurchaseMgr.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Alps.Domain.ProductMgr.ProductSkuInfo", "ProductSkuInfo", b1 =>
                        {
                            b1.Property<Guid>("PurchaseOrderItemID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("PricingMethod")
                                .HasColumnType("int");

                            b1.Property<Guid>("SkuID")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("PurchaseOrderItemID");

                            b1.ToTable("Purchase_PurchaseOrderItems");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseOrderItemID");
                        });
                });

            modelBuilder.Entity("Alps.Domain.SaleMgr.Commodity", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.ProductSku", "Sku")
                        .WithMany()
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.SaleMgr.SaleOrder", b =>
                {
                    b.HasOne("Alps.Domain.Common.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alps.Domain.SaleMgr.SaleOrder", "ParentSaleOrder")
                        .WithMany()
                        .HasForeignKey("ParentSaleOrderID");
                });

            modelBuilder.Entity("Alps.Domain.SaleMgr.SaleOrderItem", b =>
                {
                    b.HasOne("Alps.Domain.ProductMgr.ProductSku", "ProductSku")
                        .WithMany()
                        .HasForeignKey("ProductSkuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alps.Domain.SaleMgr.SaleOrder", "SaleOrder")
                        .WithMany("Items")
                        .HasForeignKey("SaleOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.AlpsRoleUser", b =>
                {
                    b.HasOne("Alps.Domain.SecurityMgr.AlpsRole", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alps.Domain.SecurityMgr.AlpsUser", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.SecurityMgr.Permission", b =>
                {
                    b.HasOne("Alps.Domain.SecurityMgr.AlpsResource", "Resource")
                        .WithMany("Permissions")
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alps.Domain.SecurityMgr.AlpsRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockInVoucher", b =>
                {
                    b.HasOne("Alps.Domain.Common.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alps.Domain.LogisticsMgr.DispatchRecord", "DispatchRecord")
                        .WithMany()
                        .HasForeignKey("DispatchRecordID");

                    b.HasOne("Alps.Domain.Common.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockInVoucherItem", b =>
                {
                    b.HasOne("Alps.Domain.StockMgr.StockInVoucher", "StockInVoucher")
                        .WithMany("Items")
                        .HasForeignKey("StockInVoucherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockOutVoucher", b =>
                {
                    b.HasOne("Alps.Domain.Common.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alps.Domain.Common.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Alps.Domain.StockMgr.StockOutVoucherItem", b =>
                {
                    b.HasOne("Alps.Domain.StockMgr.StockOutVoucher", "StockOutVoucher")
                        .WithMany("Items")
                        .HasForeignKey("StockOutVoucherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
